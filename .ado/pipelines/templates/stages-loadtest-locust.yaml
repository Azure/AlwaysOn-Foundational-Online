parameters:
 - name: terraformWorkingDirectory
   type: string
   default: ''
 - name: customPrefix
   type: string
 - name: loadTestTargetUrl
   type: string
   default: ''
 - name: loadTestNumberOfWorkerNodes
   default: 0

stages:

- stage: deploylocust
  displayName: 'Run locust loadtest'
  jobs:
  - job: deploylocustterraform
    displayName: 'Deploy loadtest infrastructure (and run test when in embedded mode)'
    steps:
    - checkout: self # checkout github repository
    - download: current # download pipeline artifacts

    - template: steps-set-pipeline-variables.yaml # load set-pipeline-variables function

    - template: steps-terraform-init.yaml
      parameters:
        terraformStorageAccountName:        '$(terraformStorageAccount)'
        terraformStorageResourceGroupName:  '$(terraformResourceGroup)'
        terraformStateFilename:             'terraform-locust-${{ parameters.customPrefix }}.state'
        terraformWorkingDirectory:          '${{ parameters.terraformWorkingDirectory }}'

    - task: Bash@3
      name: 'terraformtaintlocustfile'
      displayName: 'Terraform taint locustfile file'
      inputs:
        workingDirectory: '${{ parameters.terraformWorkingDirectory }}'
        targetType: 'inline'
        script: |
          set -eux  # fail on error

          # Taint the locustfile so it will always be replaced with the latest version
          terraform taint -allow-missing azurerm_storage_share_file.locustfile

    # Deploy the locust infrastructure. If running in headless mode, the test will automatically start once the infra is provisioned.
    - template: steps-terraform-apply.yaml
      parameters:
        jobName:                    'LocustInfra'
        terraformWorkingDirectory:  '${{ parameters.terraformWorkingDirectory }}'
        customPrefix:               '${{ parameters.customPrefix }}'
        environment:                '$(environment)'
        customAttributes:           '-var targeturl=${{ parameters.loadTestTargetUrl }}
                                     -var queued_by="$(Build.QueuedBy)"
                                     -var branch="$(sourceBranch)"
                                     -var locust_workers=${{ parameters.loadTestNumberOfWorkerNodes }}'